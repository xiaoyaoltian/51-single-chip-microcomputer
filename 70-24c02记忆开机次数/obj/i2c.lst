C51 COMPILER V9.54   I2C                                                                   08/23/2018 15:49:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\obj\i2c.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE i2c.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\obj\i2c.lst) T
                    -ABS(2) OBJECT(.\obj\i2c.obj)

line level    source

   1          /*******************************************************************************
   2          * 版  权  : 红梅科技工作室
   3          * 论  坛  ：https://blog.csdn.net/Qingzhusshuiyun
   4          * Q Q     ：2369099714
   5          * 版权所有，盗版必究。
   6          * 工  程   : 24c02记忆开机次数
   7          * 文件名   : 24c02记忆开机次数.c
   8          * 处理器   : STC89C52RC
   9          * 编译环境 : Keil 5
  10          * 系统时钟 : 12MHZ
  11          * 版    本  : V1.0 
  12          * 生成日期  : 2018-07-10              
  13          * 修改日期  :  
  14          * 简单描述 : 函数是采用软件延时的方法产生SCL脉冲,固对高晶振频率要作 一定的修改....(本例是1us机器
  15              周期,即晶振频率要小于12MHZ)
  16          *******************************************************************************/
  17            
  18                        
  19          #include "i2c.h"
  20          #include "delay.h"
  21          
  22          #define  _Nop()  _nop_()  //定义空指令
  23                                   
  24          bit ack;                //应答标志位
  25          
  26          sbit SDA=P2^1;
  27          sbit SCL=P2^0;
  28          
  29          /*------------------------------------------------
  30                              启动总线
  31          ------------------------------------------------*/
  32          void Start_I2c()
  33          {
  34   1        SDA=1;   //发送起始条件的数据信号
  35   1        _Nop();
  36   1        SCL=1;
  37   1        _Nop();    //起始条件建立时间大于4.7us,延时
  38   1        _Nop();
  39   1        _Nop();
  40   1        _Nop();
  41   1        _Nop();    
  42   1        SDA=0;     //发送起始信号
  43   1        _Nop();    //起始条件锁定时间大于4μ
  44   1        _Nop();
  45   1        _Nop();
  46   1        _Nop();
  47   1        _Nop();       
  48   1        SCL=0;    //钳住I2C总线，准备发送或接收数据
  49   1        _Nop();
  50   1        _Nop();
  51   1      }
  52          /*------------------------------------------------
  53                              结束总线
  54          ------------------------------------------------*/
C51 COMPILER V9.54   I2C                                                                   08/23/2018 15:49:25 PAGE 2   

  55          void Stop_I2c()
  56          {
  57   1        SDA=0;    //发送结束条件的数据信号
  58   1        _Nop();   //发送结束条件的时钟信号
  59   1        SCL=1;    //结束条件建立时间大于4μ
  60   1        _Nop();
  61   1        _Nop();
  62   1        _Nop();
  63   1        _Nop();
  64   1        _Nop();
  65   1        SDA=1;    //发送I2C总线结束信号
  66   1        _Nop();
  67   1        _Nop();
  68   1        _Nop();
  69   1        _Nop();
  70   1      }
  71          
  72          
  73          
  74          
  75          /*----------------------------------------------------------------
  76                           字节数据传送函数               
  77          函数原型: void  SendByte(unsigned char c);
  78          功能:  将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  79               此状态位进行操作.(不应答或非应答都使ack=0 假)     
  80               发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  81          ------------------------------------------------------------------*/
  82          void  SendByte(unsigned char c)
  83          {
  84   1       unsigned char BitCnt;
  85   1       
  86   1       for(BitCnt=0;BitCnt<8;BitCnt++)  //要传送的数据长度为8位
  87   1          {
  88   2           if((c<<BitCnt)&0x80)SDA=1;   //判断发送位
  89   2             else  SDA=0;                
  90   2           _Nop();
  91   2           SCL=1;               //置时钟线为高，通知被控器开始接收数据位
  92   2            _Nop(); 
  93   2            _Nop();             //保证时钟高电平周期大于4μ
  94   2            _Nop();
  95   2            _Nop();
  96   2            _Nop();         
  97   2           SCL=0; 
  98   2          }
  99   1          
 100   1          _Nop();
 101   1          _Nop();
 102   1          SDA=1;               //8位发送完后释放数据线，准备接收应答位
 103   1          _Nop();
 104   1          _Nop();   
 105   1          SCL=1;
 106   1          _Nop();
 107   1          _Nop();
 108   1          _Nop();
 109   1          if(SDA==1)ack=0;     
 110   1             else ack=1;        //判断是否接收到应答信号
 111   1          SCL=0;
 112   1          _Nop();
 113   1          _Nop();
 114   1      }
 115          
 116          
C51 COMPILER V9.54   I2C                                                                   08/23/2018 15:49:25 PAGE 3   

 117          
 118          
 119          
 120          
 121          
 122          /*----------------------------------------------------------------
 123                           字节数据传送函数               
 124          函数原型: unsigned char  RcvByte();
 125          功能:  用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
 126               发完后请用应答函数。  
 127          ------------------------------------------------------------------*/  
 128          unsigned char  RcvByte()
 129          {
 130   1        unsigned char retc;
 131   1        unsigned char BitCnt;
 132   1        
 133   1        retc=0; 
 134   1        SDA=1;             //置数据线为输入方式
 135   1        for(BitCnt=0;BitCnt<8;BitCnt++)
 136   1            {
 137   2              _Nop();           
 138   2              SCL=0;       //置时钟线为低，准备接收数据位
 139   2              _Nop();
 140   2              _Nop();      //时钟低电平周期大于4.7us
 141   2              _Nop();
 142   2              _Nop();
 143   2              _Nop();
 144   2              SCL=1;       //置时钟线为高使数据线上数据有效
 145   2              _Nop();
 146   2              _Nop();
 147   2              retc=retc<<1;
 148   2              if(SDA==1)retc=retc+1; //读数据位,接收的数据位放入retc中
 149   2              _Nop();
 150   2              _Nop(); 
 151   2            }
 152   1        SCL=0;    
 153   1        _Nop();
 154   1        _Nop();
 155   1        return(retc);
 156   1      }
 157          
 158          
 159          
 160          /*----------------------------------------------------------------
 161                               应答子函数
 162          原型:  void Ack_I2c(void);
 163           
 164          ----------------------------------------------------------------*/
 165          void Ack_I2c(void)
 166          {
 167   1        
 168   1        SDA=0;     
 169   1        _Nop();
 170   1        _Nop();
 171   1        _Nop();      
 172   1        SCL=1;
 173   1        _Nop();
 174   1        _Nop();              //时钟低电平周期大于4μ
 175   1        _Nop();
 176   1        _Nop();
 177   1        _Nop();  
 178   1        SCL=0;               //清时钟线，钳住I2C总线以便继续接收
C51 COMPILER V9.54   I2C                                                                   08/23/2018 15:49:25 PAGE 4   

 179   1        _Nop();
 180   1        _Nop();    
 181   1      }
 182          /*----------------------------------------------------------------
 183                               非应答子函数
 184          原型:  void NoAck_I2c(void);
 185           
 186          ----------------------------------------------------------------*/
 187          void NoAck_I2c(void)
 188          {
 189   1        
 190   1        SDA=1;
 191   1        _Nop();
 192   1        _Nop();
 193   1        _Nop();      
 194   1        SCL=1;
 195   1        _Nop();
 196   1        _Nop();              //时钟低电平周期大于4μ
 197   1        _Nop();
 198   1        _Nop();
 199   1        _Nop();  
 200   1        SCL=0;                //清时钟线，钳住I2C总线以便继续接收
 201   1        _Nop();
 202   1        _Nop();    
 203   1      }
 204          
 205          
 206          
 207          
 208          
 209          
 210          /*----------------------------------------------------------------
 211                              向无子地址器件发送字节数据函数               
 212          函数原型: bit  ISendByte(unsigned char sla,ucahr c);  
 213          功能:     从启动总线到发送地址，数据，结束总线的全过程,从器件地址sla.
 214                     如果返回1表示操作成功，否则操作有误。
 215          注意：    使用前必须已结束总线。
 216          ----------------------------------------------------------------*/
 217          /*bit ISendByte(unsigned char sla,unsigned char c)
 218          {
 219             Start_I2c();               //启动总线
 220             SendByte(sla);             //发送器件地址
 221               if(ack==0)return(0);
 222             SendByte(c);               //发送数据
 223               if(ack==0)return(0);
 224            Stop_I2c();                 //结束总线
 225            return(1);
 226          }
 227          */
 228          
 229          /*----------------------------------------------------------------
 230                              向有子地址器件发送多字节数据函数               
 231          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 232          功能:     从启动总线到发送地址，子地址,数据，结束总线的全过程,从器件
 233                    地址sla，子地址suba，发送内容是s指向的内容，发送no个字节。
 234                     如果返回1表示操作成功，否则操作有误。
 235          注意：    使用前必须已结束总线。
 236          ----------------------------------------------------------------*/
 237          bit ISendStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 238          {
 239   1         unsigned char i;
 240   1       for(i=0;i<no;i++)
C51 COMPILER V9.54   I2C                                                                   08/23/2018 15:49:25 PAGE 5   

 241   1          { 
 242   2         Start_I2c();               //启动总线
 243   2         SendByte(sla);             //发送器件地址
 244   2           if(ack==0)return(0);
 245   2         SendByte(suba);            //发送器件子地址
 246   2           if(ack==0)return(0); 
 247   2       
 248   2           SendByte(*s);            //发送数据
 249   2             if(ack==0)return(0);
 250   2           Stop_I2c();                  //结束总线
 251   2         DelayMs(1);               //必须延时等待芯片内部自动处理数据完毕
 252   2         s++;
 253   2         suba++;
 254   2          } 
 255   1        return(1);
 256   1      }
 257          
 258          /*----------------------------------------------------------------
 259                              向无子地址器件读字节数据函数               
 260          函数原型: bit  IRcvByte(unsigned char sla,ucahr *c);  
 261          功能:     从启动总线到发送地址，读数据，结束总线的全过程,从器件地
 262                    址sla，返回值在c.
 263                     如果返回1表示操作成功，否则操作有误。
 264          注意：    使用前必须已结束总线。
 265          ----------------------------------------------------------------*/
 266          /*bit IRcvByte(unsigned char sla,unsigned char *c)
 267          {
 268             Start_I2c();                //启动总线
 269             SendByte(sla+1);            //发送器件地址
 270               if(ack==0)return(0);
 271             *c=RcvByte();               //读取数据
 272               NoAck_I2c();              //发送非就答位
 273               Stop_I2c();               //结束总线
 274            return(1);
 275          }
 276          
 277          */
 278          /*----------------------------------------------------------------
 279                              向有子地址器件读取多字节数据函数               
 280          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 281          功能:     从启动总线到发送地址，子地址,读数据，结束总线的全过程,从器件
 282                    地址sla，子地址suba，读出的内容放入s指向的存储区，读no个字节。
 283                     如果返回1表示操作成功，否则操作有误。
 284          注意：    使用前必须已结束总线。
 285          ----------------------------------------------------------------*/
 286          bit IRcvStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 287          {
 288   1         unsigned char i;
 289   1      
 290   1         Start_I2c();               //启动总线
 291   1         SendByte(sla);             //发送器件地址
 292   1           if(ack==0)return(0);
 293   1         SendByte(suba);            //发送器件子地址
 294   1           if(ack==0)return(0);
 295   1      
 296   1         Start_I2c();
 297   1         SendByte(sla+1);
 298   1            if(ack==0)return(0);
 299   1      
 300   1        for(i=0;i<no-1;i++)
 301   1          { 
 302   2           *s=RcvByte();              //发送数据
C51 COMPILER V9.54   I2C                                                                   08/23/2018 15:49:25 PAGE 6   

 303   2            Ack_I2c();                //发送就答位 
 304   2           s++;
 305   2          } 
 306   1         *s=RcvByte();
 307   1          NoAck_I2c();                 //发送非应位
 308   1          Stop_I2c();                    //结束总线
 309   1        return(1);
 310   1      }
 311          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    340    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
